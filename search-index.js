var searchIndex = {};
searchIndex['immeta'] = {"items":[[3,"Dimensions","immeta","Represents image dimensions in pixels.",null,null],[12,"width","","Image width in pixels.",0,null],[12,"height","","Image height in pixels.",0,null],[4,"Error","","Library-specific error type which is returned by metadata loading operations.",null,null],[13,"InvalidFormat","","Returned when metadata can't be recovered because image format is invalid.",1,null],[13,"UnexpectedEndOfFile","","Returned when metadata can't be recovered because of the sudden end of the image file.",1,null],[13,"Io","","Returned when an I/O error occurs when reading an input stream.",1,null],[4,"GenericMetadata","","Represents metadata loaded from a file whose format was determined automatically.",null,null],[13,"Png","","",2,null],[13,"Gif","","",2,null],[13,"Jpeg","","",2,null],[13,"Webp","","",2,null],[5,"load","","Attempts to load metadata for an image contained in the provided input stream.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"load_from_file","","Attempts to load metadata for an image contained in a file identified by the provided path.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"load_from_buf","","Attempts to load metadata for an image contained in an in-memory buffer.",null,null],[0,"markers","","Contains metadata marker types.",null,null],[4,"Jpeg","immeta::markers","",null,null],[4,"Png","","",null,null],[4,"Gif","","",null,null],[4,"Webp","","",null,null],[8,"MetadataMarker","","A marker trait for specific metadata type.",null,null],[16,"Metadata","","",3,null],[10,"from_generic","","Tries to convert the given `GenericMetadata` instance into a concrete metadata type.",3,{"inputs":[{"name":"metadatamarker"},{"name":"genericmetadata"}],"output":{"name":"result"}}],[10,"from_generic_ref","","Tries to extract a reference to a concrete metadata type from the given\n`GenericMetadata` reference.",3,{"inputs":[{"name":"metadatamarker"},{"name":"genericmetadata"}],"output":{"name":"option"}}],[10,"load","","Attempts to load metadata for an image of a concrete type from the provided reader.",3,{"inputs":[{"name":"metadatamarker"},{"name":"r"}],"output":{"name":"result"}}],[10,"load_from_seek","","Attempts to load metadata for an image of a concrete type from the provided\nseekable reader.",3,{"inputs":[{"name":"metadatamarker"},{"name":"r"}],"output":{"name":"result"}}],[10,"load_from_file","","Attempts to load metadata for an image of a concrete type from a file identified\nby the provided path.",3,{"inputs":[{"name":"metadatamarker"},{"name":"p"}],"output":{"name":"result"}}],[10,"load_from_buf","","Attempts to load metadata for an image of a concrete type from the provided byte\nbuffer.",3,null],[11,"from_generic","","",4,{"inputs":[{"name":"jpeg"},{"name":"genericmetadata"}],"output":{"name":"result"}}],[11,"from_generic_ref","","",4,{"inputs":[{"name":"jpeg"},{"name":"genericmetadata"}],"output":{"name":"option"}}],[11,"load","","",4,{"inputs":[{"name":"jpeg"},{"name":"r"}],"output":{"name":"result"}}],[11,"load_from_seek","","",4,{"inputs":[{"name":"jpeg"},{"name":"r"}],"output":{"name":"result"}}],[11,"load_from_file","","",4,{"inputs":[{"name":"jpeg"},{"name":"p"}],"output":{"name":"result"}}],[11,"load_from_buf","","",4,null],[11,"from_generic","","",5,{"inputs":[{"name":"png"},{"name":"genericmetadata"}],"output":{"name":"result"}}],[11,"from_generic_ref","","",5,{"inputs":[{"name":"png"},{"name":"genericmetadata"}],"output":{"name":"option"}}],[11,"load","","",5,{"inputs":[{"name":"png"},{"name":"r"}],"output":{"name":"result"}}],[11,"load_from_seek","","",5,{"inputs":[{"name":"png"},{"name":"r"}],"output":{"name":"result"}}],[11,"load_from_file","","",5,{"inputs":[{"name":"png"},{"name":"p"}],"output":{"name":"result"}}],[11,"load_from_buf","","",5,null],[11,"from_generic","","",6,{"inputs":[{"name":"gif"},{"name":"genericmetadata"}],"output":{"name":"result"}}],[11,"from_generic_ref","","",6,{"inputs":[{"name":"gif"},{"name":"genericmetadata"}],"output":{"name":"option"}}],[11,"load","","",6,{"inputs":[{"name":"gif"},{"name":"r"}],"output":{"name":"result"}}],[11,"load_from_seek","","",6,{"inputs":[{"name":"gif"},{"name":"r"}],"output":{"name":"result"}}],[11,"load_from_file","","",6,{"inputs":[{"name":"gif"},{"name":"p"}],"output":{"name":"result"}}],[11,"load_from_buf","","",6,null],[11,"from_generic","","",7,{"inputs":[{"name":"webp"},{"name":"genericmetadata"}],"output":{"name":"result"}}],[11,"from_generic_ref","","",7,{"inputs":[{"name":"webp"},{"name":"genericmetadata"}],"output":{"name":"option"}}],[11,"load","","",7,{"inputs":[{"name":"webp"},{"name":"r"}],"output":{"name":"result"}}],[11,"load_from_seek","","",7,{"inputs":[{"name":"webp"},{"name":"r"}],"output":{"name":"result"}}],[11,"load_from_file","","",7,{"inputs":[{"name":"webp"},{"name":"p"}],"output":{"name":"result"}}],[11,"load_from_buf","","",7,null],[11,"eq","immeta","",2,{"inputs":[{"name":"genericmetadata"},{"name":"genericmetadata"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"genericmetadata"},{"name":"genericmetadata"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"genericmetadata"}],"output":{"name":"genericmetadata"}}],[11,"fmt","","",2,{"inputs":[{"name":"genericmetadata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"dimensions","","Returns image dimensions from the contained metadata.",2,{"inputs":[{"name":"genericmetadata"}],"output":{"name":"dimensions"}}],[11,"mime_type","","Returns a MIME type string for the image type of the contained metadata.",2,{"inputs":[{"name":"genericmetadata"}],"output":{"name":"str"}}],[11,"into","","Attemts to convert this value to the specific metadata type by value.",2,{"inputs":[{"name":"genericmetadata"}],"output":{"name":"result"}}],[11,"as_ref","","Attempts to convert this value to the sepcific metadata type by reference.",2,{"inputs":[{"name":"genericmetadata"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"dimensions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"dimensions"},{"name":"dimensions"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"dimensions"},{"name":"dimensions"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"dimensions"}],"output":{"name":"dimensions"}}],[11,"from","","",0,null],[0,"common","","",null,null],[0,"riff","immeta::common","",null,null],[3,"ChunkId","immeta::common::riff","",null,null],[3,"RiffReader","","",null,null],[3,"RiffChunk","","",null,null],[3,"RiffListChunk","","",null,null],[11,"fmt","","",8,{"inputs":[{"name":"chunkid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"chunkid"},{"name":"chunkid"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"chunkid"},{"name":"chunkid"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"chunkid"}],"output":{"name":"chunkid"}}],[11,"as_str","","",8,{"inputs":[{"name":"chunkid"}],"output":{"name":"option"}}],[11,"as_bytes","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"chunkid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"riffreader"},{"name":"r"}],"output":{"name":"riffreader"}}],[11,"root","","",9,{"inputs":[{"name":"riffreader"}],"output":{"name":"result"}}],[11,"chunk_id","","",10,{"inputs":[{"name":"riffchunk"}],"output":{"name":"chunkid"}}],[11,"len","","",10,{"inputs":[{"name":"riffchunk"}],"output":{"name":"u32"}}],[11,"contents","","",10,{"inputs":[{"name":"riffchunk"}],"output":{"name":"read"}}],[11,"can_have_subchunks","","",10,{"inputs":[{"name":"riffchunk"}],"output":{"name":"bool"}}],[11,"into_list","","",10,{"inputs":[{"name":"riffchunk"}],"output":{"name":"result"}}],[11,"chunk_id","","",11,{"inputs":[{"name":"rifflistchunk"}],"output":{"name":"chunkid"}}],[11,"len","","",11,{"inputs":[{"name":"rifflistchunk"}],"output":{"name":"u32"}}],[11,"chunk_type","","",11,{"inputs":[{"name":"rifflistchunk"}],"output":{"name":"chunkid"}}],[11,"next","","",11,{"inputs":[{"name":"rifflistchunk"}],"output":{"name":"option"}}],[0,"tiff","immeta::common","",null,null],[3,"TiffReader","immeta::common::tiff","A TIFF document reader.",null,null],[3,"LazyIfds","","An intermediate structure, a reference to which can be converted to an iterator\nof IFDs.",null,null],[3,"Ifds","","An iterator of IFDs in a TIFF document.",null,null],[3,"Ifd","","Represents a single IFD.",null,null],[3,"Entry","","Represents a single TIFF IFD entry.",null,null],[4,"EntryType","","Designates TIFF IFD entry type, as defined by TIFF spec.",null,null],[13,"Byte","","",12,null],[13,"Ascii","","",12,null],[13,"Short","","",12,null],[13,"Long","","",12,null],[13,"Rational","","",12,null],[13,"SignedByte","","",12,null],[13,"Undefined","","",12,null],[13,"SignedShort","","",12,null],[13,"SignedLong","","",12,null],[13,"SignedRational","","",12,null],[13,"Float","","",12,null],[13,"Double","","",12,null],[13,"Unknown","","",12,null],[4,"EntryValues","","An iterator over values in an TIFF IFD entry.",null,null],[0,"entry_types","","Contains representation types for all of defined TIFF entry types.",null,null],[4,"Byte","immeta::common::tiff::entry_types","",null,null],[4,"Ascii","","",null,null],[4,"Short","","",null,null],[4,"Long","","",null,null],[4,"Rational","","",null,null],[4,"SignedByte","","",null,null],[4,"Undefined","","",null,null],[4,"SignedShort","","",null,null],[4,"SignedLong","","",null,null],[4,"SignedRational","","",null,null],[4,"Float","","",null,null],[4,"Double","","",null,null],[11,"entry_type","","",13,{"inputs":[{"name":"byte"}],"output":{"name":"entrytype"}}],[11,"read_from","","",13,{"inputs":[{"name":"byte"},{"name":"r"},{"name":"byteorder"}],"output":{"name":"result"}}],[11,"read_many_from","","",13,{"inputs":[{"name":"byte"},{"name":"r"},{"name":"byteorder"},{"name":"u32"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_from_u32","","",13,null],[11,"entry_type","","",14,{"inputs":[{"name":"ascii"}],"output":{"name":"entrytype"}}],[11,"read_from","","",14,{"inputs":[{"name":"ascii"},{"name":"r"},{"name":"byteorder"}],"output":{"name":"result"}}],[11,"read_many_from","","",14,{"inputs":[{"name":"ascii"},{"name":"r"},{"name":"byteorder"},{"name":"u32"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_from_u32","","",14,null],[11,"entry_type","","",15,{"inputs":[{"name":"short"}],"output":{"name":"entrytype"}}],[11,"read_from","","",15,{"inputs":[{"name":"short"},{"name":"r"},{"name":"byteorder"}],"output":{"name":"result"}}],[11,"read_many_from","","",15,{"inputs":[{"name":"short"},{"name":"r"},{"name":"byteorder"},{"name":"u32"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_from_u32","","",15,null],[11,"entry_type","","",16,{"inputs":[{"name":"long"}],"output":{"name":"entrytype"}}],[11,"read_from","","",16,{"inputs":[{"name":"long"},{"name":"r"},{"name":"byteorder"}],"output":{"name":"result"}}],[11,"read_many_from","","",16,{"inputs":[{"name":"long"},{"name":"r"},{"name":"byteorder"},{"name":"u32"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_from_u32","","",16,null],[11,"entry_type","","",17,{"inputs":[{"name":"rational"}],"output":{"name":"entrytype"}}],[11,"read_from","","",17,{"inputs":[{"name":"rational"},{"name":"r"},{"name":"byteorder"}],"output":{"name":"result"}}],[11,"read_many_from","","",17,{"inputs":[{"name":"rational"},{"name":"r"},{"name":"byteorder"},{"name":"u32"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_from_u32","","",17,null],[11,"entry_type","","",18,{"inputs":[{"name":"signedbyte"}],"output":{"name":"entrytype"}}],[11,"read_from","","",18,{"inputs":[{"name":"signedbyte"},{"name":"r"},{"name":"byteorder"}],"output":{"name":"result"}}],[11,"read_many_from","","",18,{"inputs":[{"name":"signedbyte"},{"name":"r"},{"name":"byteorder"},{"name":"u32"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_from_u32","","",18,null],[11,"entry_type","","",19,{"inputs":[{"name":"undefined"}],"output":{"name":"entrytype"}}],[11,"read_from","","",19,{"inputs":[{"name":"undefined"},{"name":"r"},{"name":"byteorder"}],"output":{"name":"result"}}],[11,"read_many_from","","",19,{"inputs":[{"name":"undefined"},{"name":"r"},{"name":"byteorder"},{"name":"u32"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_from_u32","","",19,null],[11,"entry_type","","",20,{"inputs":[{"name":"signedshort"}],"output":{"name":"entrytype"}}],[11,"read_from","","",20,{"inputs":[{"name":"signedshort"},{"name":"r"},{"name":"byteorder"}],"output":{"name":"result"}}],[11,"read_many_from","","",20,{"inputs":[{"name":"signedshort"},{"name":"r"},{"name":"byteorder"},{"name":"u32"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_from_u32","","",20,null],[11,"entry_type","","",21,{"inputs":[{"name":"signedlong"}],"output":{"name":"entrytype"}}],[11,"read_from","","",21,{"inputs":[{"name":"signedlong"},{"name":"r"},{"name":"byteorder"}],"output":{"name":"result"}}],[11,"read_many_from","","",21,{"inputs":[{"name":"signedlong"},{"name":"r"},{"name":"byteorder"},{"name":"u32"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_from_u32","","",21,null],[11,"entry_type","","",22,{"inputs":[{"name":"signedrational"}],"output":{"name":"entrytype"}}],[11,"read_from","","",22,{"inputs":[{"name":"signedrational"},{"name":"r"},{"name":"byteorder"}],"output":{"name":"result"}}],[11,"read_many_from","","",22,{"inputs":[{"name":"signedrational"},{"name":"r"},{"name":"byteorder"},{"name":"u32"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_from_u32","","",22,null],[11,"entry_type","","",23,{"inputs":[{"name":"float"}],"output":{"name":"entrytype"}}],[11,"read_from","","",23,{"inputs":[{"name":"float"},{"name":"r"},{"name":"byteorder"}],"output":{"name":"result"}}],[11,"read_many_from","","",23,{"inputs":[{"name":"float"},{"name":"r"},{"name":"byteorder"},{"name":"u32"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_from_u32","","",23,null],[11,"entry_type","","",24,{"inputs":[{"name":"double"}],"output":{"name":"entrytype"}}],[11,"read_from","","",24,{"inputs":[{"name":"double"},{"name":"r"},{"name":"byteorder"}],"output":{"name":"result"}}],[11,"read_many_from","","",24,{"inputs":[{"name":"double"},{"name":"r"},{"name":"byteorder"},{"name":"u32"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_from_u32","","",24,null],[8,"EntryTypeRepr","immeta::common::tiff","Designates a marker type which represent one of TIFF directory entry types.",null,null],[16,"Repr","","The represented type, e.g. Rust primitive or a string.",25,null],[10,"entry_type","","Returns the entry type corresponding to this marker type.",25,{"inputs":[{"name":"entrytyperepr"}],"output":{"name":"entrytype"}}],[10,"read_from","","Attempts to read the represented value from the given stream with the given byte order.",25,{"inputs":[{"name":"entrytyperepr"},{"name":"r"},{"name":"byteorder"}],"output":{"name":"result"}}],[10,"read_many_from","","Attempts to read a number of the represented values from the given stream with the given\nbyte order.",25,{"inputs":[{"name":"entrytyperepr"},{"name":"r"},{"name":"byteorder"},{"name":"u32"},{"name":"vec"}],"output":{"name":"result"}}],[10,"read_from_u32","","Reads the `n`th represented value inside `source`.",25,null],[11,"new","","Wraps the provider `Read + Seek` implementation and returns a new TIFF reader.",26,{"inputs":[{"name":"tiffreader"},{"name":"r"}],"output":{"name":"tiffreader"}}],[11,"ifds","","Returns an iterator over IFDs in the TIFF document.",26,{"inputs":[{"name":"tiffreader"}],"output":{"name":"result"}}],[11,"next","","",27,{"inputs":[{"name":"ifds"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"ifd"}],"output":{"name":"option"}}],[11,"eq","","",12,{"inputs":[{"name":"entrytype"},{"name":"entrytype"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"entrytype"},{"name":"entrytype"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"entrytype"}],"output":{"name":"entrytype"}}],[11,"fmt","","",12,{"inputs":[{"name":"entrytype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"entrytype"},{"name":"u16"}],"output":{"name":"entrytype"}}],[11,"tag","","Returns the tag of the entry.",29,{"inputs":[{"name":"entry"}],"output":{"name":"u16"}}],[11,"entry_type","","Returns entry type.",29,{"inputs":[{"name":"entry"}],"output":{"name":"entrytype"}}],[11,"count","","Returns the number of items this entry contains.",29,{"inputs":[{"name":"entry"}],"output":{"name":"u32"}}],[11,"values","","Returns an iterator for elements of the specified representation type.",29,{"inputs":[{"name":"entry"}],"output":{"name":"option"}}],[11,"all_values","","Returns a vector containing all of the items of this entry, loaded with the specified\nrepresentation type.",29,{"inputs":[{"name":"entry"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"entryvalues"}],"output":{"name":"option"}}],[0,"formats","immeta","Supported image types.",null,null],[0,"jpeg","immeta::formats","Metadata of JPEG images.",null,null],[3,"Metadata","immeta::formats::jpeg","Represents metadata of a JPEG image.",null,null],[12,"dimensions","","Image size.",31,null],[11,"fmt","","",31,{"inputs":[{"name":"metadata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"metadata"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"metadata"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"load","","",31,{"inputs":[{"name":"metadata"},{"name":"r"}],"output":{"name":"result"}}],[0,"png","immeta::formats","Metadata for PNG images.",null,null],[3,"Metadata","immeta::formats::png","Represents metadata of a PNG image.",null,null],[12,"dimensions","","Width and height.",32,null],[12,"color_type","","Color type used in the image.",32,null],[12,"color_depth","","Color depth (bits per pixel) used in the image.",32,null],[12,"compression_method","","Compression method used in the image.",32,null],[12,"filter_method","","Preprocessing method used in the image.",32,null],[12,"interlace_method","","Transmission order used in the image.",32,null],[4,"ColorType","","Color type used in an image.",null,null],[13,"Grayscale","","",33,null],[13,"Rgb","","",33,null],[13,"Indexed","","",33,null],[13,"GrayscaleAlpha","","",33,null],[13,"RgbAlpha","","",33,null],[4,"CompressionMethod","","Compression method used in an image.",null,null],[13,"DeflateInflate","","",34,null],[4,"FilterMethod","","Filtering method used in an image.",null,null],[13,"AdaptiveFiltering","","",35,null],[4,"InterlaceMethod","","Interlace method used in an image.",null,null],[13,"Disabled","","",36,null],[13,"Adam7","","",36,null],[11,"fmt","","",33,{"inputs":[{"name":"colortype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"colortype"}],"output":{"name":"colortype"}}],[11,"fmt","","",34,{"inputs":[{"name":"compressionmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"compressionmethod"},{"name":"compressionmethod"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"compressionmethod"},{"name":"compressionmethod"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"compressionmethod"}],"output":{"name":"compressionmethod"}}],[11,"fmt","","",35,{"inputs":[{"name":"filtermethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"filtermethod"},{"name":"filtermethod"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"filtermethod"}],"output":{"name":"filtermethod"}}],[11,"fmt","","",36,{"inputs":[{"name":"interlacemethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"interlacemethod"},{"name":"interlacemethod"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"interlacemethod"},{"name":"interlacemethod"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"interlacemethod"}],"output":{"name":"interlacemethod"}}],[11,"fmt","","",32,{"inputs":[{"name":"metadata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"metadata"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"metadata"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"load","","",32,{"inputs":[{"name":"metadata"},{"name":"r"}],"output":{"name":"result"}}],[0,"gif","immeta::formats","Metadata of GIF images.",null,null],[3,"ColorTable","immeta::formats::gif","Contains information about a color table (global or local).",null,null],[12,"size","","Color table size, between 2 and 256.",37,null],[12,"sorted","","Whether the color table is sorted. Quoting from GIF spec:",37,null],[3,"ImageDescriptor","","Contains metadata about an image block, i.e. a single frame of a GIF image.",null,null],[12,"left","","Offset of the image data from the left boundary of the logical screen.",38,null],[12,"top","","Offset of the image data from the top boundary of the logical screen.",38,null],[12,"width","","Width of the image data.",38,null],[12,"height","","Height of the image data.",38,null],[12,"local_color_table","","Information about local color table, if it is present.",38,null],[12,"interlace","","Whether the image is interlaced.",38,null],[3,"GraphicControlExtension","","Contains metadata for a graphic control extension block.",null,null],[12,"disposal_method","","Indicates how the graphic should be treated after it is displayed.",39,null],[12,"user_input","","Whether or not user input is required before continuing.",39,null],[12,"transparent_color_index","","Specifies \"transparent\" color in a color table, if available.",39,null],[12,"delay_time","","Defines the delay before processing the rest of the GIF stream.",39,null],[3,"PlainTextExtension","","Contains metadata for a plain text extension block.",null,null],[12,"left","","Column number, in pixels, of the left edge of the text grid, with respect to\nthe left edge of the logical screen.",40,null],[12,"top","","Same as above, for the top edges.",40,null],[12,"width","","Width of the text grid in pixels.",40,null],[12,"height","","Height of the text grid in pixels.",40,null],[12,"cell_width","","Width in pixels of each cell in the text grid.",40,null],[12,"cell_height","","Height in pixels of each cell in the text grid.",40,null],[12,"foreground_color_index","","Index of a foreground color in the global color table.",40,null],[12,"background_color_index","","Index of a background color in the global color table.",40,null],[3,"ApplicationExtension","","Contains metadata for application extension block.",null,null],[12,"application_identifier","","Eight ASCII bytes of an application identifier.",41,null],[12,"authentication_code","","Three bytes of an application authentication code.",41,null],[3,"CommentExtension","","Represents a comment extension block.",null,null],[3,"Metadata","","Contains metadata about the whole GIF image.",null,null],[12,"version","","GIF format version from the file header.",42,null],[12,"dimensions","","Logical screen dimensions of the image.",42,null],[12,"global_color_table","","Information about global color table, if it is present.",42,null],[12,"color_resolution","","Number of colors available to the original image.",42,null],[12,"background_color_index","","Index of the default background color in the global color table.",42,null],[12,"pixel_aspect_ratio","","A factor which defines the aspect ration of a pixel in the original image.",42,null],[12,"blocks","","Metadata for each block in the GIF image.",42,null],[4,"Version","","GIF file version number.",null,null],[13,"V87a","","",43,null],[13,"V89a","","",43,null],[4,"Block","","Represents various kinds of blocks which can be used in a GIF image.",null,null],[13,"ImageDescriptor","","An image descriptor (image contents for one frame).",44,null],[13,"GraphicControlExtension","","Graphics control metadata block (e.g. frame delay or transparency).",44,null],[13,"PlainTextExtension","","Plain text block (textual data that can be displayed as an image).",44,null],[13,"ApplicationExtension","","Application information block (contains information about application which created the\nimage).",44,null],[13,"CommentExtension","","Comment block (contains commentary data which is not displayed in the image).",44,null],[4,"DisposalMethod","","Describes disposal methods used for GIF image frames.",null,null],[13,"None","","The decoder is not required to take any action.",45,null],[13,"DoNotDispose","","The graphic is to be left in place.",45,null],[13,"RestoreToBackgroundColor","","The area used by the graphic must be restored to the background color.",45,null],[13,"RestoreToPrevious","","The decoder is required to restore the area overwritten by the graphic with what\nwas there prior to rendering the graphic.",45,null],[13,"Unknown","","Unknown disposal method.",45,null],[11,"fmt","","",43,{"inputs":[{"name":"version"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"version"}],"output":{"name":"version"}}],[11,"fmt","","",44,{"inputs":[{"name":"block"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"block"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"block"},{"name":"block"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"block"}],"output":{"name":"block"}}],[11,"fmt","","",37,{"inputs":[{"name":"colortable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"colortable"},{"name":"colortable"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"colortable"},{"name":"colortable"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"colortable"}],"output":{"name":"colortable"}}],[11,"fmt","","",38,{"inputs":[{"name":"imagedescriptor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"imagedescriptor"},{"name":"imagedescriptor"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"imagedescriptor"},{"name":"imagedescriptor"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"imagedescriptor"}],"output":{"name":"imagedescriptor"}}],[11,"fmt","","",39,{"inputs":[{"name":"graphiccontrolextension"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"graphiccontrolextension"},{"name":"graphiccontrolextension"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"graphiccontrolextension"},{"name":"graphiccontrolextension"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"graphiccontrolextension"}],"output":{"name":"graphiccontrolextension"}}],[11,"delay_time_ms","","Returns delay time in milliseconds.",39,{"inputs":[{"name":"graphiccontrolextension"}],"output":{"name":"u32"}}],[11,"fmt","","",45,{"inputs":[{"name":"disposalmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"disposalmethod"},{"name":"disposalmethod"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"disposalmethod"},{"name":"disposalmethod"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"disposalmethod"}],"output":{"name":"disposalmethod"}}],[11,"fmt","","",40,{"inputs":[{"name":"plaintextextension"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"plaintextextension"},{"name":"plaintextextension"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"plaintextextension"},{"name":"plaintextextension"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"plaintextextension"}],"output":{"name":"plaintextextension"}}],[11,"fmt","","",41,{"inputs":[{"name":"applicationextension"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"applicationextension"},{"name":"applicationextension"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"applicationextension"},{"name":"applicationextension"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"applicationextension"}],"output":{"name":"applicationextension"}}],[11,"application_identifier_str","","Returns application identifier as a UTF-8 string, if possible.",41,{"inputs":[{"name":"applicationextension"}],"output":{"name":"option"}}],[11,"authentication_code_str","","Returns authentication code as a UTF-8 string, if possible.",41,{"inputs":[{"name":"applicationextension"}],"output":{"name":"option"}}],[11,"fmt","","",46,{"inputs":[{"name":"commentextension"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"commentextension"},{"name":"commentextension"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"commentextension"},{"name":"commentextension"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"commentextension"}],"output":{"name":"commentextension"}}],[11,"fmt","","",42,{"inputs":[{"name":"metadata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"metadata"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"metadata"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"pixel_aspect_ratio_approx","","Computes pixel aspect ratio approximation, if it is available.",42,{"inputs":[{"name":"metadata"}],"output":{"name":"option"}}],[11,"frames_number","","Computes the number of frames, i.e. the number of image descriptor blocks.",42,{"inputs":[{"name":"metadata"}],"output":{"name":"usize"}}],[11,"is_animated","","Returns `true` if the image is animated, `false` otherwise.",42,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"load","","",42,{"inputs":[{"name":"metadata"},{"name":"r"}],"output":{"name":"result"}}],[0,"webp","immeta::formats","",null,null],[3,"VP8Metadata","immeta::formats::webp","",null,null],[12,"version_number","","",47,null],[12,"show_frame","","",47,null],[12,"first_partition_len","","",47,null],[12,"frame","","",47,null],[3,"VP8LMetadata","","",null,null],[3,"VP8XMetadata","","",null,null],[4,"Metadata","","",null,null],[13,"VP8","","",48,null],[13,"VP8L","","",48,null],[13,"VP8X","","",48,null],[4,"VP8Frame","","",null,null],[13,"Key","","",49,null],[12,"dimensions","immeta::formats::webp::VP8Frame","",49,null],[12,"x_scale","","",49,null],[12,"y_scale","","",49,null],[13,"Inter","immeta::formats::webp","",49,null],[11,"fmt","","",48,{"inputs":[{"name":"metadata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"metadata"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"metadata"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"fmt","","",47,{"inputs":[{"name":"vp8metadata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"vp8metadata"},{"name":"vp8metadata"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"vp8metadata"},{"name":"vp8metadata"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"vp8metadata"}],"output":{"name":"vp8metadata"}}],[11,"fmt","","",49,{"inputs":[{"name":"vp8frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"vp8frame"},{"name":"vp8frame"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"vp8frame"},{"name":"vp8frame"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"vp8frame"}],"output":{"name":"vp8frame"}}],[11,"fmt","","",50,{"inputs":[{"name":"vp8lmetadata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"vp8lmetadata"},{"name":"vp8lmetadata"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"vp8lmetadata"},{"name":"vp8lmetadata"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"vp8lmetadata"}],"output":{"name":"vp8lmetadata"}}],[11,"fmt","","",51,{"inputs":[{"name":"vp8xmetadata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"vp8xmetadata"},{"name":"vp8xmetadata"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"vp8xmetadata"},{"name":"vp8xmetadata"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"vp8xmetadata"}],"output":{"name":"vp8xmetadata"}}],[11,"dimensions","","",48,{"inputs":[{"name":"metadata"}],"output":{"name":"dimensions"}}],[11,"load","","",48,{"inputs":[{"name":"metadata"},{"name":"r"}],"output":{"name":"result"}}],[6,"Result","immeta","Library-specific result type.",null,null],[8,"LoadableMetadata","","Provides several convenience functions for loading metadata from various sources.",null,null],[10,"load","","Loads the implementing type from the given buffered input stream.",52,{"inputs":[{"name":"loadablemetadata"},{"name":"r"}],"output":{"name":"result"}}],[11,"load_from_seek","","Loads the implementing type from the given buffered and seekable input stream.",52,{"inputs":[{"name":"loadablemetadata"},{"name":"r"}],"output":{"name":"result"}}],[11,"load_from_file","","Loads the implementing type from a file specified by the given path.",52,{"inputs":[{"name":"loadablemetadata"},{"name":"p"}],"output":{"name":"result"}}],[11,"load_from_buf","","Loads the implementing type from an in-memory buffer.",52,null],[11,"load_from_seek","","Loads the implementing type from the given buffered and seekable input stream.",52,{"inputs":[{"name":"loadablemetadata"},{"name":"r"}],"output":{"name":"result"}}],[11,"load_from_file","","Loads the implementing type from a file specified by the given path.",52,{"inputs":[{"name":"loadablemetadata"},{"name":"p"}],"output":{"name":"result"}}],[11,"load_from_buf","","Loads the implementing type from an in-memory buffer.",52,null]],"paths":[[3,"Dimensions"],[4,"Error"],[4,"GenericMetadata"],[8,"MetadataMarker"],[4,"Jpeg"],[4,"Png"],[4,"Gif"],[4,"Webp"],[3,"ChunkId"],[3,"RiffReader"],[3,"RiffChunk"],[3,"RiffListChunk"],[4,"EntryType"],[4,"Byte"],[4,"Ascii"],[4,"Short"],[4,"Long"],[4,"Rational"],[4,"SignedByte"],[4,"Undefined"],[4,"SignedShort"],[4,"SignedLong"],[4,"SignedRational"],[4,"Float"],[4,"Double"],[8,"EntryTypeRepr"],[3,"TiffReader"],[3,"Ifds"],[3,"Ifd"],[3,"Entry"],[4,"EntryValues"],[3,"Metadata"],[3,"Metadata"],[4,"ColorType"],[4,"CompressionMethod"],[4,"FilterMethod"],[4,"InterlaceMethod"],[3,"ColorTable"],[3,"ImageDescriptor"],[3,"GraphicControlExtension"],[3,"PlainTextExtension"],[3,"ApplicationExtension"],[3,"Metadata"],[4,"Version"],[4,"Block"],[4,"DisposalMethod"],[3,"CommentExtension"],[3,"VP8Metadata"],[4,"Metadata"],[4,"VP8Frame"],[3,"VP8LMetadata"],[3,"VP8XMetadata"],[8,"LoadableMetadata"]]};
searchIndex['num'] = {"items":[[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"complex","","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",1,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",2,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",4,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",5,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",6,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",7,null],[13,"Invalid","","",7,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","Parse error for `from_str_radix`",8,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",8,{"inputs":[{"name":"num"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",9,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",9,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",10,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",11,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",11,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",11,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",11,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",11,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",12,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",12,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",13,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",13,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",14,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",15,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",16,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",17,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",18,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",18,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",18,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",18,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe \"sign bit\" in the most significant bits even for unsigned types.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",18,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",18,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",18,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",18,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",18,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",21,{"inputs":[{"name":"numcast"},{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",22,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",22,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",22,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",22,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",22,null],[11,"fmt","","",6,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"]]};
searchIndex['arrayvec'] = {"items":[[8,"RangeArgument","arrayvec","**IndexRange** is implemented by Rust's built-in range types, produced\nby range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",0,{"inputs":[{"name":"rangeargument"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",0,{"inputs":[{"name":"rangeargument"}],"output":{"name":"option"}}],[3,"ArrayString","","A string with a fixed capacity.",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[11,"new","","Create a new empty `ArrayString`.",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",1,{"inputs":[{"name":"arraystring"},{"name":"str"}],"output":{"name":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"usize"}}],[11,"push","","Adds the given char to the end of the string.",1,{"inputs":[{"name":"arraystring"},{"name":"char"}],"output":{"name":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",1,{"inputs":[{"name":"arraystring"},{"name":"str"}],"output":{"name":"result"}}],[11,"clear","","Make the string empty.",1,{"inputs":[{"name":"arraystring"}],"output":null}],[11,"set_len","","Set the strings's length.",1,{"inputs":[{"name":"arraystring"},{"name":"usize"}],"output":null}],[11,"deref","","",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"str"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"arraystring"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"arraystring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"hash","","",1,{"inputs":[{"name":"arraystring"},{"name":"h"}],"output":null}],[11,"borrow","","",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"str"}}],[11,"as_ref","","",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"arraystring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"arraystring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","","",1,{"inputs":[{"name":"arraystring"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"arraystring"}],"output":{"name":"arraystring"}}],[11,"clone_from","","",1,{"inputs":[{"name":"arraystring"},{"name":"self"}],"output":null}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array's element type",2,null],[11,"drop","","",3,{"inputs":[{"name":"arrayvec"}],"output":null}],[11,"new","","Create a new empty `ArrayVec`.",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"usize"}}],[11,"push","","Push `element` to the end of the vector.",3,{"inputs":[{"name":"arrayvec"},{"name":"item"}],"output":{"name":"option"}}],[11,"pop","","Remove the last element in the vector.",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"option"}}],[11,"insert","","Insert `element` in position `index`.",3,{"inputs":[{"name":"arrayvec"},{"name":"usize"},{"name":"item"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",3,{"inputs":[{"name":"arrayvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",3,{"inputs":[{"name":"arrayvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clear","","Remove all elements in the vector.",3,{"inputs":[{"name":"arrayvec"}],"output":null}],[11,"set_len","","Set the vector's length without dropping or moving out elements",3,{"inputs":[{"name":"arrayvec"},{"name":"usize"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",3,{"inputs":[{"name":"arrayvec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"result"}}],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",3,{"inputs":[{"name":"arrayvec"}],"output":null}],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"from","","",3,{"inputs":[{"name":"arrayvec"},{"name":"a"}],"output":{"name":"self"}}],[11,"into_iter","","",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"intoiter"}}],[11,"next","","",4,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",4,{"inputs":[{"name":"intoiter"}],"output":null}],[11,"next","","",5,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"drain"}],"output":null}],[11,"extend","","",3,{"inputs":[{"name":"arrayvec"},{"name":"t"}],"output":null}],[11,"from_iter","","",3,{"inputs":[{"name":"arrayvec"},{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"self"}}],[11,"clone_from","","",3,{"inputs":[{"name":"arrayvec"},{"name":"self"}],"output":null}],[11,"hash","","",3,{"inputs":[{"name":"arrayvec"},{"name":"h"}],"output":null}],[11,"eq","","",3,{"inputs":[{"name":"arrayvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",3,null],[11,"borrow","","",3,null],[11,"borrow_mut","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"arrayvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"arrayvec"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"arrayvec"},{"name":"arrayvec"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"arrayvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"arrayvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"arrayvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"arrayvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"arrayvec"},{"name":"arrayvec"}],"output":{"name":"ordering"}}],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"arrayvec"}],"output":{"name":"result"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"capacityerror"},{"name":"capacityerror"}],"output":{"name":"ordering"}}],[11,"clone","","",6,{"inputs":[{"name":"capacityerror"}],"output":{"name":"capacityerror"}}],[11,"element","","Extract the overflowing element",6,{"inputs":[{"name":"capacityerror"}],"output":{"name":"t"}}],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",6,{"inputs":[{"name":"capacityerror"}],"output":{"name":"capacityerror"}}],[11,"description","","",6,{"inputs":[{"name":"capacityerror"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"capacityerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"capacityerror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[8,"RangeArgument"],[3,"ArrayString"],[8,"Array"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"],[3,"CapacityError"]]};
searchIndex['nodrop'] = {"items":[[3,"NoDrop","nodrop","A type holding **T** that will not call its destructor on drop",null,null],[11,"new","","Create a new **NoDrop**.",0,{"inputs":[{"name":"nodrop"},{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"nodrop"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"nodrop"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"nodrop"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"nodrop"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex['odds'] = {"items":[[3,"Fix","odds","Fixpoint combinator for rust closures, generalized over the return type.",null,null],[5,"ref_eq","","Compare if **a** and **b** are equal *as pointers*.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"ptr_eq","","Compare if **a** and **b** are equal pointers.",null,null],[5,"raw_byte_repr","","Safe to use with any wholly initialized memory `ptr`",null,null],[5,"get_unchecked","","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done.",null,null],[5,"get_unchecked_mut","","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done.",null,null],[5,"debug_assert_unreachable","","Act as `debug_assert!` in debug mode, asserting that this point is not reached.",null,{"inputs":[],"output":null}],[5,"slice_unchecked","","Check slicing bounds in debug mode, otherwise just act as an unchecked\nslice call.",null,null],[5,"slice_unchecked_mut","","Check slicing bounds in debug mode, otherwise just act as an unchecked\nslice call.",null,null],[5,"ref_slice","","Create a length 1 slice out of a reference",null,null],[5,"ref_slice_mut","","Create a length 1 mutable slice out of a reference",null,null],[11,"start","core::ops","",0,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",1,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",2,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",2,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"call","odds","",3,{"inputs":[{"name":"fix"},{"name":"t"}],"output":{"name":"r"}}],[11,"clone","","",3,{"inputs":[{"name":"fix"}],"output":{"name":"self"}}],[0,"string","","Extensions to `&str` and `String`",null,null],[3,"Prefixes","odds::string","Iterator of all non-empty prefixes",null,null],[3,"Suffixes","","Iterator of all non-empty suffixes",null,null],[3,"Substrings","","Iterator of all non-empty substrings",null,null],[8,"StrExt","","Extra methods for `str`",null,null],[10,"rep","","Repeat the string `n` times.",4,{"inputs":[{"name":"strext"},{"name":"usize"}],"output":{"name":"string"}}],[10,"append","","Requires `feature=\"std\"`",4,{"inputs":[{"name":"strext"},{"name":"str"}],"output":{"name":"string"}}],[10,"prefixes","","All non-empty prefixes",4,{"inputs":[{"name":"strext"}],"output":{"name":"prefixes"}}],[10,"suffixes","","All non-empty suffixes",4,{"inputs":[{"name":"strext"}],"output":{"name":"suffixes"}}],[10,"substrings","","Produce all non-empty substrings",4,{"inputs":[{"name":"strext"}],"output":{"name":"substrings"}}],[10,"is_acceptable_index","","Return `true` if `index` is acceptable for slicing the string.",4,{"inputs":[{"name":"strext"},{"name":"usize"}],"output":{"name":"bool"}}],[8,"StringExt","","Extra methods for `String`",null,null],[10,"insert_str","","**Panics** if `index` is out of bounds.",5,{"inputs":[{"name":"stringext"},{"name":"usize"},{"name":"str"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"prefixes"}],"output":{"name":"prefixes"}}],[11,"next","","",6,{"inputs":[{"name":"prefixes"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"suffixes"}],"output":{"name":"suffixes"}}],[11,"next","","",7,{"inputs":[{"name":"suffixes"}],"output":{"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"substrings"}],"output":{"name":"substrings"}}],[11,"next","","",8,{"inputs":[{"name":"substrings"}],"output":{"name":"option"}}],[11,"insert_str","collections::string","**Panics** if `index` is out of bounds.",9,{"inputs":[{"name":"string"},{"name":"usize"},{"name":"str"}],"output":null}],[0,"vec","odds","Extensions to `Vec`",null,null],[8,"VecExt","odds::vec","Extra methods for `Vec<T>`",null,null],[10,"splice","","Remove elements in a range, and insert from an iterator in their place.",10,{"inputs":[{"name":"vecext"},{"name":"r"},{"name":"i"}],"output":null}],[10,"retain_mut","","Retains only the elements specified by the predicate.",10,{"inputs":[{"name":"vecext"},{"name":"f"}],"output":null}],[11,"splice","collections::vec","",11,{"inputs":[{"name":"vec"},{"name":"r"},{"name":"i"}],"output":null}],[11,"retain_mut","","",11,{"inputs":[{"name":"vec"},{"name":"f"}],"output":null}],[8,"IndexRange","odds","**IndexRange** is implemented by Rust's built-in range types, produced\nby range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",12,{"inputs":[{"name":"indexrange"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",12,{"inputs":[{"name":"indexrange"}],"output":{"name":"option"}}],[11,"start","","Start index (inclusive)",12,{"inputs":[{"name":"indexrange"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",12,{"inputs":[{"name":"indexrange"}],"output":{"name":"option"}}]],"paths":[[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"Fix"],[8,"StrExt"],[8,"StringExt"],[3,"Prefixes"],[3,"Suffixes"],[3,"Substrings"],[3,"String"],[8,"VecExt"],[3,"Vec"],[8,"IndexRange"]]};
searchIndex['byteorder'] = {"items":[[4,"Error","byteorder","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"write_uint","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"write_uint","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
initSearch(searchIndex);
